create database HOLAMUNDO;
SHOW DATABASES;
USE HOLAMUNDO;
CREATE TABLE ANIMALES (
ID INT,
TIPO VARCHAR (255),
ESTADO VARCHAR (255),
PRIMARY KEY (id)
);
-- INSERTAR DATOS EN UNA TABLA
INSERT INTO ANIMALES (TIPO, ESTADO) VALUES ('CHANCHITO','FELIZ');
-- MODIFICAR UN CAMPO TABLA YA CREADA
ALTER TABLE ANIMALES MODIFY COLUMN ID INT AUTO_INCREMENT;
-- SACAR CODIGO QUE HEMOS CREADO HASTA AHROA
SHOW CREATE TABLE ANIMALES;
/*
CREATE TABLE `animales` (
   `ID` int(11) NOT NULL AUTO_INCREMENT,
   `TIPO` varchar(255) DEFAULT NULL,
   `ESTADO` varchar(255) DEFAULT NULL,
   PRIMARY KEY (`ID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci */
 -- ISERTAR DATOS EN UNA TABLA
 INSERT INTO ANIMALES (TIPO, ESTADO) VALUES ('CHANCHITO','FELIZ');
 INSERT INTO ANIMALES (TIPO, ESTADO) VALUES ('DRAGON','FELIZ');
 INSERT INTO ANIMALES (TIPO, ESTADO) VALUES ('FELIPE','TRISTE');
 -- LISTAR UNA TABLA
SELECT * FROM ANIMALES;
-- CONSULTA
SELECT * FROM ANIMALES WHERE ID = 1;
SELECT * FROM ANIMALES WHERE ESTADO = 'FELIZ';
-- CONSULTA MÁS OCNDICIONES
SELECT * FROM ANIMALES WHERE ESTADO = 'FELIZ' AND TIPO = "CHANCHITO";
-- ACTUALIZACION DE UN DATO DE NUESTRA TABLA - MODIFICACION -
UPDATE ANIMALES SET ESTADO = 'FELIZ' WHERE ID = 4;

-- ELIMINAR REGISTRO EN NUESTRA TABLA, UN REGISTRO SOLO
/*TANTO EN UPDATE Y DELETE HAY QUE ASGINARLE UN ID sino dará ERROR*/
-- DELETE FROM ANIMALES WHERE ESTADO = "FELIZ";
-- Ó TAMBIEN PASA CON ...
-- UPDATE ANIMALES SET ESTADO = "TRISTE" WHERE TIPO = "DRAGON";
/*Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column
 To disable safe mode, toggle the option in Preferences -> SQL Editor and reconnect. */
 -- SE PUEDE QUITAR ESTE ERROR EN PREFERENCIAS,EDITOR SQL Y RECONECTAR --> pero no es aconsejable
 -- CORRECTO
DELETE FROM ANIMALES WHERE ID = 3;
UPDATE ANIMALES SET ESTADO = 'FELIZ' WHERE ID = 4;

-- crea tabla e INSERTA DATOS
CREATE TABLE USER (
ID INT NOT NULL AUTO_INCREMENT,
NAME VARCHAR (50) NOT NULL,
EDAD INT NOT NULL,
EMAIL VARCHAR (100) NOT NULL,
PRIMARY KEY (ID)
);
INSERT INTO USER (NAME, EDAD, EMAIL) VALUE ('OSCAR',25,'oscar@gamil.com');
INSERT INTO USER (NAME, EDAD, EMAIL) VALUE ('LAYLA',15,'layla@gamil.com');
INSERT INTO USER (NAME, EDAD, EMAIL) VALUE ('NICOLAS',36,'nico@gamil.com');
INSERT INTO USER (NAME, EDAD, EMAIL) VALUE ('CHANCHITO',7,'chanchito@gamil.com');
-- cambiar valor de un campo 
UPDATE user SET id = 4 WHERE id = 8;
-- visualizar datos con condiciones
SELECT * FROM USER;
SELECT * FROM USER LIMIT 1;
SELECT * FROM USER WHERE EDAD > 15;
SELECT * FROM USER WHERE EDAD >= 15;
-- condicion Y
SELECT * FROM USER WHERE EDAD > 20 AND  EMAIL = 'nico@gamil.com';
-- condicion O
SELECT * FROM USER WHERE EDAD > 20 OR  EMAIL = 'layla@gamil.com';
-- distinto
SELECT * FROM USER WHERE  EMAIL != 'layla@gamil.com';
-- BETWEEN ** AND ** --> TODOS REGISTROS ENTRE num Y num 
SELECT * FROM USER WHERE EDAD BETWEEN 15 AND 30;
-- BUSCA esta CADENA sin importar lo que hay a principio y al final --> %
SELECT * FROM USER WHERE EMAIL LIKE '%GMAIL%';
-- BUSCA esta CADENA sin importar lo que hay a principio--> %
SELECT * FROM USER WHERE EMAIL LIKE '%GMAIL';
-- ORDENAR RESULTADO BUSQEUDA --> ASC ascendente DESC descendente
SELECT * FROM USER ORDER BY EDAD ASC;
-- MAYOR Y MENOR EN LA BUSQUEDA - con AS indicamos nombre columna que saldra resultado
SELECT MAX(EDAD) AS MAYOR FROM USER;
SELECT MIN(EDAD) AS MENOR FROM USER;
-- visualizar varios campos y cambiando el nombre de uno
SELECT ID NAME FROM USER;
SELECT ID, NAME AS NOMBRE FROM USER;
-- CREAMOS TABLA NUEVA Y MODIFICAMOS NOMBRE TABLA A CONTINUACIÓN
CREATE TABLE PRODUCTS (ID INT NOT NULL AUTO_INCREMENT, NAME VARCHAR(50) NOT NULL, CREATED_BY INT NOT NULL, MARCA VARCHAR(50) NOT NULL, PRIMARY KEY (ID), FOREIGN KEY (CREATED_BY) REFERENCES USER (ID) );
-- RENOMBRAR NOMBRE DE UNA TABLA
RENAME TABLE PRODUCTS TO PRODUCT;
-- insertar en tabla producto
INSERT INTO PRODUCT (NAME, CREATED_BY, MARCA)
VALUES ('IPAD',1,'APPLE'), ('IPHONE',1,'APPLE'), ('WATCH',2,'APPLE'), ('MARBOOK',1,'APPLE'), ('IMAC',3,'APPLE'), ('IPAD MINI',2,'APPLE');
-- ASIGNAR UN ALIAS CON AS O CON UN ESPACIO
SELECT ID AS ID, EMAIL AS EMAIL FROM USER AS U;
SELECT U.ID, U.EMAIL FROM USER U;
-- JOIN --
--  LEFT JOIN --> trae campos asociaciodos a otra tabla, pero de la IZQ - compara de latabla USER y PRODUCT los campos ID y CREATED_BY
SELECT U.ID, U.EMAIL, P.NAME FROM USER U LEFT JOIN PRODUCT P ON U.ID = P.CREATED_BY;
-- LEFT JOIN --> asocia los campos que indiquemos y trae repetidos pero de la tabla de la DERECHA
SELECT U.ID, U.EMAIL, P.NAME FROM USER U RIGHT JOIN PRODUCT P ON U.ID = P.CREATED_BY;
-- LEFT JOIN --> trae tantos campos que puedan ser asociados, entre ellos
SELECT U.ID, U.EMAIL, P.NAME FROM USER U INNER JOIN PRODUCT P ON U.ID = P.CREATED_BY;
--  --> trae producto cartesiano entre dos tablas, es decir product 1 con a,b,c,d - 2 con a,b,c,d y así todos
SELECT U.ID, U.NAME, P.ID, P.NAME FROM USER U CROSS JOIN PRODUCT P; -- no hay que indicar campos - puede ser muy grande lo que traiga
-- COUNT --
SELECT COUNT(ID), MARCA FROM PRODUCT GROUP BY MARCA;
SELECT COUNT(P.ID), U.NAME FROM PRODUCT P LEFT JOIN USER U ON U.ID = P.CREATED_BY GROUP BY P.CREATED_BY;
-- BUSQUEDA indicando >=2 - OSCAR Y LEYLA nos aparecerá
SELECT COUNT(P.ID), U.NAME FROM PRODUCT P LEFT JOIN USER U ON U.ID = P.CREATED_BY GROUP BY P.CREATED_BY HAVING COUNT(P.ID) >= 2;
-- ELIMINAR TABLA
DROP TABLE PRODUCT;
DROP TABLE ANIMALES, USER;
-- creo tabla en EER Diagram
CREATE TABLE IF NOT EXISTS `mydb`.`user` (
  `ID` INT NOT NULL,
  `username` VARCHAR(16) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC)) -- INDEX guarda en memoria RAM y facilita acceso y busqueda














